<?php
/**
 * Local Configuration Override for DEVELOPMENT MODE.
 *
 * This configuration override file is for providing configuration to use while
 * in development mode. Run:
 *
 * <code>
 * $ composer development-enable
 * </code>
 *
 * from the project root to copy this file to development.local.php and enable
 * the settings it contains.
 *
 * You may also create files matching the glob pattern `{,*.}{global,local}-development.php`.
 */

return [
    'view_manager' => [
        'display_exceptions' => true,
    ],
    'pricing_config' => [
        'by_sku_base_url' => 'https://svc.localhost/bySKU.php',
        'by_sku_userid' => 'jpalmer',
        'by_sku_password' => 'goodbass',
        'by_sku_method' => 'GET',
        'by_sku_object_items_controller' => 'customerlistitems',
        'by_sku_object_users_controller' => 'customers',
        'by_sku_object_sales_controller' => 'salespeople',
        'sslcapath' => '/Users/jasonpalmer/svc.localhost.key', 
        'sslcafile' => '/Users/jasonpalmer/svc.localhost.crt', 
        'ssl' => array(
                // Do not Verify server side certificate,
                // accept invalid or self-signed SSL certificates
                'verify_peer' => true,
                'allow_self_signed' => true,
                // Capture the peer's certificate
                'capture_peer_cert' => true,
                'passphrase' => 'changeme'
            ),
    ],
    'db' => [
        'driver' => 'Pdo',
        'dsn' => sprintf('sqlite:%s/data/pricing_app.db', realpath(getcwd()))
    ],
    'service_manager' => array(
        'factories' => array(
            'Zend\Db\Adapter\Adapter' => 'Zend\Db\Adapter\AdapterServiceFactory',
            'Zend\Session\Config\ConfigInterface' => 'Zend\Session\Service\SessionConfigFactory',
        ),
    ),
    'doctrine' => array(
        'connection' => array(
            // default connection name
            'orm_default' => array(
                'driverClass' => 'Doctrine\DBAL\Driver\PDOSqlite\Driver',
                'params' => array(
                    'url' => 'sqlite://../data/pricing_app.db'
                )
            )
        ),
        'driver' => array(
            // defines an annotation driver with two paths, and names it `my_annotation_driver`
            'my_annotation_driver' => array(
                'class' => 'Doctrine\ORM\Mapping\Driver\AnnotationDriver',
                'cache' => 'array',
                'paths' => array(
                    __DIR__ . '/' . __NAMESPACE__
                ),
            ),

            // default metadata driver, aggregates all other drivers into a single one.
            // Override `orm_default` only if you know what you're doing
            'orm_default' => array(
                'drivers' => array(
                    // register `my_annotation_driver` for any entity under namespace `My\Namespace`
                    'DataAccess\FFM\Entity' => 'my_annotation_driver'
                )
            )
        )
    ),
];
